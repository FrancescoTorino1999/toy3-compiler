
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package de.jflex.analizzatore.lessicale;

import java_cup.runtime.*;
import compilatori.visitor.classes.visitorclasses.baseclasses.*;
import compilatori.visitor.classes.visitorclasses.Expressions.*;
import compilatori.visitor.classes.visitorclasses.Expressions.Rels.*;
import compilatori.visitor.classes.visitorclasses.Expressions.Arith.*;
import compilatori.visitor.classes.visitorclasses.Expressions.Bool.*;
import compilatori.visitor.classes.visitorclasses.Expressions.Consts.*;
import compilatori.visitor.classes.visitorclasses.Operators.*;
import compilatori.visitor.classes.visitorclasses.Statements.*;
import java.util.ArrayList;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\005\000\002\002\004\000\002\033" +
    "\006\000\002\034\006\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\004\004\000\002\004\002\000" +
    "\002\005\006\000\002\006\005\000\002\006\007\000\002" +
    "\006\003\000\002\006\005\000\002\007\003\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\011\000\002\012" +
    "\010\000\002\013\005\000\002\013\003\000\002\014\005" +
    "\000\002\015\005\000\002\015\003\000\002\016\003\000" +
    "\002\016\004\000\002\017\004\000\002\017\002\000\002" +
    "\020\006\000\002\021\004\000\002\021\002\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\006" +
    "\000\002\022\004\000\002\022\012\000\002\022\010\000" +
    "\002\022\010\000\002\022\006\000\002\022\005\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\024" +
    "\003\000\002\032\006\000\002\032\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\004" +
    "\000\002\025\004\000\002\025\003\000\002\025\003\000" +
    "\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\004\005\001\002\000\004\002\235\001" +
    "\002\000\010\005\ufffb\012\006\021\011\001\002\000\010" +
    "\007\ufff5\061\127\062\234\001\002\000\004\007\227\001" +
    "\002\000\012\005\ufffb\012\006\021\011\037\ufffb\001\002" +
    "\000\004\012\172\001\002\000\004\005\016\001\002\000" +
    "\012\005\ufffb\012\006\021\011\037\ufffb\001\002\000\006" +
    "\005\ufffc\037\ufffc\001\002\000\004\002\001\001\002\000" +
    "\040\006\ufff9\012\ufff9\022\ufff9\032\ufff9\035\ufff9\036\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\001\002\000\040\006\uffd9\012\034" +
    "\022\044\032\032\035\024\036\041\042\027\043\040\044" +
    "\025\064\035\065\022\066\030\067\037\070\045\071\020" +
    "\001\002\000\050\007\uffe7\010\uffe7\011\uffe7\023\uffe7\030" +
    "\uffe7\031\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\062\uffe7\001\002\000\044\006\uffd9\012\167\022\044" +
    "\026\uffd9\032\032\035\024\036\041\040\uffd9\042\027\043" +
    "\040\044\025\064\035\065\022\066\030\067\037\070\045" +
    "\071\020\001\002\000\050\007\uffe9\010\uffe9\011\uffe9\023" +
    "\uffe9\030\uffe9\031\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\062\uffe9\001\002\000\050\007\uffb7\010\uffb7" +
    "\011\uffb7\023\uffb7\030\uffb7\031\uffb7\043\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\062\uffb7\001\002\000\004\022" +
    "\161\001\002\000\026\012\050\022\044\043\040\044\025" +
    "\064\035\065\022\066\030\067\037\070\045\071\020\001" +
    "\002\000\004\006\157\001\002\000\026\012\050\022\044" +
    "\043\040\044\025\064\035\065\022\066\030\067\037\070" +
    "\045\071\020\001\002\000\050\007\uffec\010\uffec\011\uffec" +
    "\023\uffec\030\uffec\031\uffec\043\uffec\045\uffec\046\uffec\047" +
    "\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\056\uffec\057\uffec\062\uffec\001\002\000\042\010\154\011" +
    "\uffb8\030\uffb8\031\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\001\002\000\004\022\141\001\002\000\044" +
    "\010\uffcb\011\137\023\uffcb\030\uffcb\031\uffcb\043\055\045" +
    "\060\046\065\047\063\050\056\051\071\052\064\053\057" +
    "\054\070\055\062\056\061\057\067\001\002\000\054\007" +
    "\ufff5\011\uffb9\013\uffcd\022\051\027\uffcd\030\uffb9\031\uffb9" +
    "\043\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\061\127" +
    "\062\130\001\002\000\050\007\uffea\010\uffea\011\uffea\023" +
    "\uffea\030\uffea\031\uffea\043\uffea\045\uffea\046\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\057\uffea\062\uffea\001\002\000\044\006\ufffa\012\ufffa" +
    "\022\ufffa\026\ufffa\032\ufffa\035\ufffa\036\ufffa\040\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\001\002\000\050\007\uffeb\010\uffeb\011" +
    "\uffeb\023\uffeb\030\uffeb\031\uffeb\043\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\062\uffeb\001\002\000\026\012\050" +
    "\022\044\043\040\044\025\064\035\065\022\066\030\067" +
    "\037\070\045\071\020\001\002\000\010\012\006\021\011" +
    "\037\ufffb\001\002\000\006\030\113\031\114\001\002\000" +
    "\006\013\107\027\106\001\002\000\026\012\050\022\044" +
    "\043\040\044\025\064\035\065\022\066\030\067\037\070" +
    "\045\071\020\001\002\000\050\007\uffe8\010\uffe8\011\uffe8" +
    "\023\uffe8\030\uffe8\031\uffe8\043\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\062\uffe8\001\002\000\034\023\066\043" +
    "\055\045\060\046\065\047\063\050\056\051\071\052\064" +
    "\053\057\054\070\055\062\056\061\057\067\001\002\000" +
    "\050\007\uffb8\010\uffb8\011\uffb8\023\uffb8\030\uffb8\031\uffb8" +
    "\043\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\062\uffb8" +
    "\001\002\000\052\007\uffb9\010\uffb9\011\uffb9\022\051\023" +
    "\uffb9\030\uffb9\031\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\062\uffb9\001\002\000\030\012\050\022\044" +
    "\023\053\043\040\044\025\064\035\065\022\066\030\067" +
    "\037\070\045\071\020\001\002\000\004\023\054\001\002" +
    "\000\050\007\uffc9\010\uffc9\011\uffc9\023\uffc9\030\uffc9\031" +
    "\uffc9\043\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\062" +
    "\uffc9\001\002\000\050\007\uffca\010\uffca\011\uffca\023\uffca" +
    "\030\uffca\031\uffca\043\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\062\uffca\001\002\000\026\012\050\022\044\043" +
    "\040\044\025\064\035\065\022\066\030\067\037\070\045" +
    "\071\020\001\002\000\026\012\050\022\044\043\040\044" +
    "\025\064\035\065\022\066\030\067\037\070\045\071\020" +
    "\001\002\000\026\012\050\022\044\043\040\044\025\064" +
    "\035\065\022\066\030\067\037\070\045\071\020\001\002" +
    "\000\026\012\050\022\044\043\040\044\025\064\035\065" +
    "\022\066\030\067\037\070\045\071\020\001\002\000\026" +
    "\012\050\022\044\043\040\044\025\064\035\065\022\066" +
    "\030\067\037\070\045\071\020\001\002\000\026\012\050" +
    "\022\044\043\040\044\025\064\035\065\022\066\030\067" +
    "\037\070\045\071\020\001\002\000\026\012\050\022\044" +
    "\043\040\044\025\064\035\065\022\066\030\067\037\070" +
    "\045\071\020\001\002\000\026\012\050\022\044\043\040" +
    "\044\025\064\035\065\022\066\030\067\037\070\045\071" +
    "\020\001\002\000\026\012\050\022\044\043\040\044\025" +
    "\064\035\065\022\066\030\067\037\070\045\071\020\001" +
    "\002\000\050\007\uffbc\010\uffbc\011\uffbc\023\uffbc\030\uffbc" +
    "\031\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\062\uffbc\001\002\000\026\012\050\022\044\043\040\044" +
    "\025\064\035\065\022\066\030\067\037\070\045\071\020" +
    "\001\002\000\026\012\050\022\044\043\040\044\025\064" +
    "\035\065\022\066\030\067\037\070\045\071\020\001\002" +
    "\000\026\012\050\022\044\043\040\044\025\064\035\065" +
    "\022\066\030\067\037\070\045\071\020\001\002\000\050" +
    "\007\uffc3\010\uffc3\011\uffc3\023\uffc3\030\uffc3\031\uffc3\043" +
    "\055\045\060\046\065\047\063\050\056\051\uffc3\052\064" +
    "\053\057\054\070\055\062\056\061\057\067\062\uffc3\001" +
    "\002\000\050\007\uffc0\010\uffc0\011\uffc0\023\uffc0\030\uffc0" +
    "\031\uffc0\043\055\045\060\046\065\047\063\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\062\uffc0\001\002\000\050\007\uffbd\010\uffbd\011\uffbd\023" +
    "\uffbd\030\uffbd\031\uffbd\043\055\045\060\046\065\047\063" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\062\uffbd\001\002\000\050\007\uffc6\010\uffc6" +
    "\011\uffc6\023\uffc6\030\uffc6\031\uffc6\043\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\062\uffc6\001\002\000\050\007" +
    "\uffc2\010\uffc2\011\uffc2\023\uffc2\030\uffc2\031\uffc2\043\055" +
    "\045\060\046\065\047\063\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\062\uffc2\001\002" +
    "\000\050\007\uffc5\010\uffc5\011\uffc5\023\uffc5\030\uffc5\031" +
    "\uffc5\043\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\062" +
    "\uffc5\001\002\000\050\007\uffbf\010\uffbf\011\uffbf\023\uffbf" +
    "\030\uffbf\031\uffbf\043\055\045\060\046\065\047\063\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\062\uffbf\001\002\000\050\007\uffbe\010\uffbe\011" +
    "\uffbe\023\uffbe\030\uffbe\031\uffbe\043\055\045\060\046\065" +
    "\047\063\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\062\uffbe\001\002\000\050\007\uffc8" +
    "\010\uffc8\011\uffc8\023\uffc8\030\uffc8\031\uffc8\043\uffc8\045" +
    "\uffc8\046\065\047\063\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\062\uffc8\001\002\000" +
    "\050\007\uffc1\010\uffc1\011\uffc1\023\uffc1\030\uffc1\031\uffc1" +
    "\043\055\045\060\046\065\047\063\050\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\062\uffc1" +
    "\001\002\000\050\007\uffc4\010\uffc4\011\uffc4\023\uffc4\030" +
    "\uffc4\031\uffc4\043\055\045\060\046\065\047\063\050\uffc4" +
    "\051\uffc4\052\064\053\057\054\070\055\062\056\061\057" +
    "\067\062\uffc4\001\002\000\050\007\uffc7\010\uffc7\011\uffc7" +
    "\023\uffc7\030\uffc7\031\uffc7\043\uffc7\045\uffc7\046\065\047" +
    "\063\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\062\uffc7\001\002\000\004\010\112\001" +
    "\002\000\026\012\050\022\044\043\040\044\025\064\035" +
    "\065\022\066\030\067\037\070\045\071\020\001\002\000" +
    "\004\010\111\001\002\000\044\006\uffd5\012\uffd5\022\uffd5" +
    "\026\uffd5\032\uffd5\035\uffd5\036\uffd5\040\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5" +
    "\071\uffd5\001\002\000\044\006\uffd8\012\uffd8\022\uffd8\026" +
    "\uffd8\032\uffd8\035\uffd8\036\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\001\002\000\004\010\116\001\002\000\004\010\115" +
    "\001\002\000\044\006\uffd6\012\uffd6\022\uffd6\026\uffd6\032" +
    "\uffd6\035\uffd6\036\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\001" +
    "\002\000\044\006\uffd7\012\uffd7\022\uffd7\026\uffd7\032\uffd7" +
    "\035\uffd7\036\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\001\002" +
    "\000\004\037\121\001\002\000\004\010\125\001\002\000" +
    "\040\012\ufff9\022\ufff9\032\ufff9\035\ufff9\036\ufff9\040\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\001\002\000\040\012\034\022\044" +
    "\032\032\035\024\036\041\040\uffd9\042\027\043\040\044" +
    "\025\064\035\065\022\066\030\067\037\070\045\071\020" +
    "\001\002\000\004\040\124\001\002\000\004\010\ufffe\001" +
    "\002\000\044\006\uffd0\012\uffd0\022\uffd0\026\uffd0\032\uffd0" +
    "\035\uffd0\036\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002" +
    "\000\050\007\uffbb\010\uffbb\011\uffbb\023\uffbb\030\uffbb\031" +
    "\uffbb\043\uffbb\045\uffbb\046\065\047\063\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\062" +
    "\uffbb\001\002\000\026\012\050\022\044\043\040\044\025" +
    "\064\035\065\022\066\030\067\037\070\045\071\020\001" +
    "\002\000\004\012\131\001\002\000\014\007\ufff5\013\uffcd" +
    "\027\uffcd\061\127\062\130\001\002\000\004\007\ufff7\001" +
    "\002\000\006\013\uffce\027\uffce\001\002\000\036\007\ufff4" +
    "\043\055\045\060\046\065\047\063\050\056\051\071\052" +
    "\064\053\057\054\070\055\062\056\061\057\067\062\135" +
    "\001\002\000\004\012\006\001\002\000\004\007\ufff6\001" +
    "\002\000\026\012\050\022\044\043\040\044\025\064\035" +
    "\065\022\066\030\067\037\070\045\071\020\001\002\000" +
    "\012\010\uffcc\023\uffcc\030\uffcc\031\uffcc\001\002\000\026" +
    "\012\050\022\044\043\040\044\025\064\035\065\022\066" +
    "\030\067\037\070\045\071\020\001\002\000\034\023\143" +
    "\043\055\045\060\046\065\047\063\050\056\051\071\052" +
    "\064\053\057\054\070\055\062\056\061\057\067\001\002" +
    "\000\004\033\144\001\002\000\004\025\145\001\002\000" +
    "\040\012\ufff9\022\ufff9\026\ufff9\032\ufff9\035\ufff9\036\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\001\002\000\046\006\uffd2\012\uffd2" +
    "\022\uffd2\026\uffd2\032\uffd2\034\147\035\uffd2\036\uffd2\040" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\071\uffd2\001\002\000\004\025\145\001" +
    "\002\000\044\006\uffd3\012\uffd3\022\uffd3\026\uffd3\032\uffd3" +
    "\035\uffd3\036\uffd3\040\uffd3\042\uffd3\043\uffd3\044\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\001\002" +
    "\000\040\012\034\022\044\026\uffd9\032\032\035\024\036" +
    "\041\042\027\043\040\044\025\064\035\065\022\066\030" +
    "\067\037\070\045\071\020\001\002\000\004\026\153\001" +
    "\002\000\054\005\uffdb\006\uffdb\012\uffdb\021\uffdb\022\uffdb" +
    "\026\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\001\002\000\044\006\uffd4\012" +
    "\uffd4\022\uffd4\026\uffd4\032\uffd4\035\uffd4\036\uffd4\040\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\001\002\000\034\010\156\043\055" +
    "\045\060\046\065\047\063\050\056\051\071\052\064\053" +
    "\057\054\070\055\062\056\061\057\067\001\002\000\044" +
    "\006\uffcf\012\uffcf\022\uffcf\026\uffcf\032\uffcf\035\uffcf\036" +
    "\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\070\uffcf\071\uffcf\001\002\000\004\002" +
    "\uffff\001\002\000\050\007\uffba\010\uffba\011\uffba\023\uffba" +
    "\030\uffba\031\uffba\043\055\045\060\046\065\047\063\050" +
    "\uffba\051\uffba\052\064\053\057\054\070\055\062\056\061" +
    "\057\067\062\uffba\001\002\000\026\012\050\022\044\043" +
    "\040\044\025\064\035\065\022\066\030\067\037\070\045" +
    "\071\020\001\002\000\034\023\163\043\055\045\060\046" +
    "\065\047\063\050\056\051\071\052\064\053\057\054\070" +
    "\055\062\056\061\057\067\001\002\000\004\041\164\001" +
    "\002\000\004\025\145\001\002\000\044\006\uffd1\012\uffd1" +
    "\022\uffd1\026\uffd1\032\uffd1\035\uffd1\036\uffd1\040\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\070\uffd1\071\uffd1\001\002\000\010\006\uffda\026\uffda\040" +
    "\uffda\001\002\000\050\011\uffb9\013\uffcd\022\051\027\uffcd" +
    "\030\uffb9\031\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\062\170\001\002\000\004\012\171\001\002\000" +
    "\010\013\uffcd\027\uffcd\062\170\001\002\000\004\022\173" +
    "\001\002\000\010\012\174\023\201\024\177\001\002\000" +
    "\006\007\uffdf\011\uffdf\001\002\000\006\007\uffe0\011\224" +
    "\001\002\000\004\007\222\001\002\000\004\012\221\001" +
    "\002\000\004\023\216\001\002\000\006\007\205\025\uffdc" +
    "\001\002\000\006\010\203\023\uffe3\001\002\000\006\012" +
    "\174\024\177\001\002\000\004\023\uffe4\001\002\000\014" +
    "\014\215\015\211\016\213\017\214\020\212\001\002\000" +
    "\004\025\145\001\002\000\012\005\uffe5\012\uffe5\021\uffe5" +
    "\037\uffe5\001\002\000\004\025\uffdd\001\002\000\010\010" +
    "\uffef\023\uffef\025\uffef\001\002\000\010\010\uffee\023\uffee" +
    "\025\uffee\001\002\000\010\010\ufff0\023\ufff0\025\ufff0\001" +
    "\002\000\010\010\uffed\023\uffed\025\uffed\001\002\000\010" +
    "\010\ufff1\023\ufff1\025\ufff1\001\002\000\006\007\205\025" +
    "\uffdc\001\002\000\004\025\145\001\002\000\012\005\uffe6" +
    "\012\uffe6\021\uffe6\037\uffe6\001\002\000\006\007\uffde\011" +
    "\uffde\001\002\000\014\014\215\015\211\016\213\017\214" +
    "\020\212\001\002\000\006\010\uffe2\023\uffe2\001\002\000" +
    "\006\012\174\024\177\001\002\000\004\007\uffe1\001\002" +
    "\000\006\005\ufffd\037\ufffd\001\002\000\030\014\215\015" +
    "\211\016\213\017\214\020\212\064\035\065\022\066\030" +
    "\067\037\070\045\071\020\001\002\000\004\010\ufff3\001" +
    "\002\000\004\010\233\001\002\000\004\010\ufff2\001\002" +
    "\000\052\005\ufff8\006\ufff8\012\ufff8\021\ufff8\022\ufff8\026" +
    "\ufff8\032\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\001\002\000\004\012\006\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\005\007\006\006\012\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\225\005\007\006" +
    "\006\012\012\001\001\000\002\001\001\000\004\033\014" +
    "\001\001\000\012\003\013\005\007\006\006\012\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\016" +
    "\001\001\000\024\005\035\006\006\011\022\021\025\022" +
    "\020\023\042\024\041\025\032\032\030\001\001\000\002" +
    "\001\001\000\020\011\022\021\165\022\020\023\042\024" +
    "\041\025\032\032\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\022\025\157\032" +
    "\046\001\001\000\002\001\001\000\010\011\022\025\154" +
    "\032\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\022\025\125\032\046\001\001\000\012\003\116\005\007" +
    "\006\006\012\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\022\025\045\032\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\022\024\051\025\032\032\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\022\025\104\032\046\001\001\000\010\011\022" +
    "\025\103\032\046\001\001\000\010\011\022\025\102\032" +
    "\046\001\001\000\010\011\022\025\101\032\046\001\001" +
    "\000\010\011\022\025\100\032\046\001\001\000\010\011" +
    "\022\025\077\032\046\001\001\000\010\011\022\025\076" +
    "\032\046\001\001\000\010\011\022\025\075\032\046\001" +
    "\001\000\010\011\022\025\074\032\046\001\001\000\002" +
    "\001\001\000\010\011\022\025\073\032\046\001\001\000" +
    "\010\011\022\025\072\032\046\001\001\000\010\011\022" +
    "\025\071\032\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\022\024\107\025" +
    "\032\032\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\117\001\001" +
    "\000\002\001\001\000\004\004\121\001\001\000\024\005" +
    "\035\006\006\011\022\021\122\022\020\023\042\024\041" +
    "\025\032\032\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\022" +
    "\025\133\032\046\001\001\000\006\006\131\023\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\135\001\001\000\002\001" +
    "\001\000\012\011\022\024\137\025\032\032\046\001\001" +
    "\000\002\001\001\000\010\011\022\025\141\032\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\145" +
    "\001\001\000\004\004\150\001\001\000\002\001\001\000" +
    "\004\020\147\001\001\000\002\001\001\000\024\005\035" +
    "\006\006\011\022\021\151\022\020\023\042\024\041\025" +
    "\032\032\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\022\025\161" +
    "\032\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\177\014\201\015\175" +
    "\016\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\205\001\001\000\002\001\001\000\012\013\203\014" +
    "\201\015\175\016\174\001\001\000\002\001\001\000\004" +
    "\010\207\001\001\000\004\020\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\216\001\001\000\004\020\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\222\001\001\000" +
    "\002\001\001\000\006\015\224\016\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\230\010\227\011" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\131\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BeginEnd 
            {
              Object RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int beginEndleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beginEndright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object beginEnd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = new ProgramOp(
                      (DeclsOp) decls,
                      (BeginEndOp) beginEnd                  );
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BeginEnd ::= BEGIN VarDecls Statements END 
            {
              Object RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varDecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stats = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  RESULT = new BeginEndOp(
                      (ArrayList<VarDeclOp>) varDecls,
                      (ArrayList<StatOp>) stats
                  );
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BeginEnd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BeginEndLet ::= INLET VarDecls Statements ENDLET 
            {
              Object RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varDecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stats = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  RESULT = new BeginEndOp(
                      (ArrayList<VarDeclOp>) varDecls,
                      (ArrayList<StatOp>) stats
                  );
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BeginEndLet",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= VarDecl Decls 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               ((ArrayList<VarDeclOp>) ((DeclsOp) decls).getDecls()).add(0, (VarDeclOp) varDecl);
               RESULT = decls;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decls ::= DefDecl Decls 
            {
              Object RESULT =null;
		int defDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               ((ArrayList<DefDeclOp>) ((DeclsOp) decls).getDefDeclOp()).add(0, (DefDeclOp) defDecl);
               RESULT = decls;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decls ::= 
            {
              Object RESULT =null;
		
               RESULT = new DeclsOp(new ArrayList<>(), new ArrayList<>());
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecls ::= VarDecls VarDecl 
            {
              Object RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ((ArrayList<VarDeclOp>) varDecls).add(0, (VarDeclOp) varDecl);
                  RESULT = varDecls;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecls ::= 
            {
              Object RESULT =null;
		
                  RESULT = new ArrayList<>();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              Object RESULT =null;
		int varsOptInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsOptInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object varsOptInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeOrConstantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeOrConstantright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeOrConstant = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  RESULT = new VarDeclOp(
                      new VarsOptInitOp((ArrayList<VarOpInitOp>) varsOptInit,
                      (TypeOrConstant) typeOrConstant)
                  );
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsOptInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsOptInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varsOptInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ArrayList<VarOpInitOp> list = new ArrayList<>();
                    list.add(0, new VarOpInitOp(new Identifier(String.valueOf(id)), null, null));
                    list.addAll((ArrayList<VarOpInitOp>) varsOptInit);
                    RESULT = list;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsOptInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsOptInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varsOptInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ArrayList<VarOpInitOp> list = new ArrayList<>();
                    list.add(0, new VarOpInitOp(new Identifier(String.valueOf(id)), null, (Visitable) expr));
                    list.addAll((ArrayList<VarOpInitOp>) varsOptInit);
                    RESULT = list;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarsOptInit ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ArrayList<VarOpInitOp>();
                    ((ArrayList<VarOpInitOp>) RESULT).add(0, new VarOpInitOp(new Identifier(String.valueOf(id)), null, null));
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ArrayList<VarOpInitOp>();
                    ((ArrayList<VarOpInitOp>) RESULT).add(0, new VarOpInitOp(new Identifier(String.valueOf(id)), null, (Visitable) expr));
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = (Type) t;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = (Const) c;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= INT 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Type("int");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= BOOL 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Type("bool");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Type("double");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= STRING 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Type("string");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= CHAR 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Type("char");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= TRUE 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean lessema = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = (Visitable) new BoolConst(String.valueOf(lessema));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= FALSE 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean lessema = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = (Visitable) new BoolConst(String.valueOf(lessema));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= INT_CONST 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer lessema = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT =  (Visitable) new IntConst(String.valueOf(lessema));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= DOUBLE_CONST 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double lessema = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = (Visitable) new DoubleConst(String.valueOf(lessema));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Constant ::= CHAR_CONST 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = (Visitable) new CharConst(String.valueOf(lessema));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Constant ::= STRING_CONST 
            {
              Object RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = (Visitable) new StringConst(String.valueOf(lessema));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parDecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int optTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object optType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new DefDeclOp(
                     new Identifier(String.valueOf(id)),
                     (ArrayList<ParDeclOp>) parDecls,
                     (OptType) optType,
                     (BodyOp) body
                 );
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int optTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object optType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new DefDeclOp(
                     new Identifier(String.valueOf(id)),
                     new ArrayList<>(), // Lista vuota di parametri
                     (OptType) optType,
                     (BodyOp) body
                 );
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 ArrayList<ParDeclOp> list = new ArrayList<>();
                 list.add(0, (ParDeclOp) parDecl);
                 list.addAll((ArrayList<ParDeclOp>) parDecls);
                 RESULT = list;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParDecls ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 ArrayList<ParDeclOp> list = new ArrayList<>();
                 list.add(0, (ParDeclOp) parDecl);
                 RESULT = list;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= PVars COLON Type 
            {
              Object RESULT =null;
		int pVarsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pVarsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pVars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new ParDeclOp(
                     (ArrayList<PVarOp>) pVars,
                     (Type) type
                 );
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVars ::= PVar COMMA PVars 
            {
              Object RESULT =null;
		int pVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pVarsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pVarsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pVars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ArrayList<PVarOp> list = new ArrayList<>();
              list.add(0, (PVarOp) pVar);
              list.addAll((ArrayList<PVarOp>) pVars);
              RESULT = list;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVars ::= PVar 
            {
              Object RESULT =null;
		int pVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ArrayList<PVarOp> list = new ArrayList<>();
              list.add(0, (PVarOp) pVar);
              RESULT = list;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PVar ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = new PVarOp(
                  new Identifier(String.valueOf(id)),
                  new Reference(Boolean.FALSE)
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PVar ::= REF ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = new PVarOp(
                  new Identifier(String.valueOf(id)),
                  new Reference(Boolean.TRUE)
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OptType ::= COLON Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new OptType(
                     (Type) type
                 );
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OptType ::= 
            {
              Object RESULT =null;
		
                 RESULT = null; // Nessun tipo opzionale specificato
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              Object RESULT =null;
		int vardeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vardeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vardecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stats = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      RESULT = new BodyOp((ArrayList<VarDeclOp>) vardecls, (ArrayList<StatOp>) stats);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statements ::= Stat Statements 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stats = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      ((ArrayList<StatOp>) stats).add(0, (StatOp) stat);
                      RESULT = stats;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statements ::= 
            {
              Object RESULT =null;
		
                      RESULT = new ArrayList<>();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Vars IN SEMI 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT = new ReadOp(
                    (ArrayList<Identifier>) vars
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Exprs OUT SEMI 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              RESULT = new WriteOp(
                  (ArrayList<Visitable>) exprs,
                  false
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= Exprs OUTNL SEMI 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT = new WriteOp(
                    (ArrayList<Visitable>) exprs,
                    true
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              RESULT = new AssignOp(
                  (ArrayList<Identifier>) vars,
                  (ArrayList<Visitable>) exprs
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int funcallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funcall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              RESULT = new FunCallOp(
                  (FunCall) funcall
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyThenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyThenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object bodyThen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bodyElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = new IfThenElseOp(
                  (Visitable) expr,
                  (BodyOp) bodyThen,
                  (BodyOp) bodyElse
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyThenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyThenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bodyThen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = new IfThenOp(
                  (Visitable) expr,
                  (BodyOp) bodyThen
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = new WhileOp(
                  (Visitable) expr,
                  (BodyOp) body
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= LET Decls BeginEndLet SEMI 
            {
              Object RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object decls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int beginEndleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int beginEndright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object beginEnd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              RESULT = new LetOp(
                  (DeclsOp) decls,
                  (BeginEndOp) beginEnd                  );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              RESULT = new ReturnOp(
                  (Visitable) expr
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Vars ::= ID PIPE Vars 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ArrayList<Identifier> list = new ArrayList<>();
              list.add(0, new Identifier(String.valueOf(id)));
              list.addAll((ArrayList<Identifier>) vars);
              RESULT = list;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Vars ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ArrayList<Identifier> list = new ArrayList<>();
              list.add(0, new Identifier(String.valueOf(id)));
              RESULT = list;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ArrayList<Visitable> list = new ArrayList<>();
              list.add(0, (Visitable) expr);
              list.addAll((ArrayList<Visitable>) exprs);
              RESULT = list;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exprs ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ArrayList<Visitable> list = new ArrayList<>();
              list.add(0, (Visitable) expr);
              RESULT = list;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               RESULT = new FunCall(
                   new Identifier(String.valueOf(id)),
                   (ArrayList<Visitable>) exprs
               );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
               RESULT = new FunCall(
                   new Identifier(String.valueOf(id)),
                   new ArrayList<>()
               );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new AddOp("plus", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new MinusOp("minus", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new TimesOp("times", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new DivOp("div", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new AndOp("and", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new OrOp("or", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new GtOp("greater_than", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new GeOp("greater_equal", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LtOp("less_than", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LeOp("less_equal", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new EqOp("equal", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new NeOp("not_equal", (Visitable) e1, (Visitable) e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = expr;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new UminusOp("minus", (Visitable) expr);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new NotOp("not", (Visitable) expr);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Identifier(String.valueOf(id));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int funcallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funcall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = (FunCall) funcall;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Constant 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = (Const) constant;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
